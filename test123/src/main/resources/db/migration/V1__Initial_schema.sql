-- ============================================
-- College Cafeteria Order System - Initial Schema
-- Version: 1.0
-- ============================================

-- User Authentication & Profile
-- ============================================

CREATE TABLE users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name VARCHAR(30) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    role VARCHAR(10) NOT NULL DEFAULT 'USER', -- USER, ADMIN, STAFF
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE social_auth (
    social_auth_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    provider VARCHAR(20) NOT NULL, -- GOOGLE, KAKAO, NAVER
    social_id VARCHAR(50) NOT NULL,
    token VARCHAR(255),
    UNIQUE(provider, social_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE user_profile
(
    user_profile_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id         INT NOT NULL UNIQUE,
    phone           VARCHAR(15),
    card_num        VARCHAR(30),
    nickname        VARCHAR(30),
    image_url       VARCHAR(500),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

-- Cafeteria Structure
-- ============================================

CREATE TABLE cafeteria (
    cafeteria_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    description VARCHAR(100),
    operating_hours VARCHAR(100), -- e.g., "Mon-Fri: 10:30-15, Mon-Fri: 16:30-20",
    address VARCHAR(100) NOT NULL
);

CREATE TABLE operating_hours (
    operating_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cafeteria_id INT NOT NULL,
    day_of_week SMALLINT NOT NULL, -- 0=Sunday, 1=Monday, ..., 6=Saturday
    open_time TIME NOT NULL,
    close_time TIME NOT NULL,
    FOREIGN KEY (cafeteria_id) REFERENCES cafeteria(cafeteria_id) ON DELETE CASCADE
);

-- Menu & Providers
-- ============================================

CREATE TABLE category (--아지오, 김밥천국이 카테고리로 들어갈거야
    category_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR(20) NOT NULL,
    cafeteria_id INT NOT NULL,
    FOREIGN KEY (cafeteria_id) REFERENCES cafeteria(cafeteria_id) ON DELETE CASCADE
);

CREATE TABLE menu (
    menu_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT,
    menu_picture VARCHAR(500),
    menu_content VARCHAR(255),
    category_id INT NOT NULL,
    available BOOLEAN NOT NULL DEFAULT true,
    stock_quantity INT DEFAULT NULL, -- NULL = unlimited, 0 = sold out
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES category(category_id) ON DELETE CASCADE
);

-- Rank/Loyalty System
-- ============================================

CREATE TABLE rank (
    rank_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    menu_id INT NOT NULL,
    period VARCHAR(10) NOT NULL, -- DAILY, WEEKLY, MONTHLY
    rank_date DATE NOT NULL,
    volume INT NOT NULL, -- number of orders
    rank_position INT NOT NULL,
    FOREIGN KEY (menu_id) REFERENCES menu(menu_id) ON DELETE CASCADE
);

-- Shopping Cart
-- ============================================

CREATE TABLE cart (
    cart_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE cart_item (
    cart_item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cart_id INT NOT NULL,
    menu_id INT NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    price DECIMAL(10,2) NOT NULL, -- snapshot price at time of adding to cart
    FOREIGN KEY (cart_id) REFERENCES cart(cart_id) ON DELETE CASCADE,
    FOREIGN KEY (menu_id) REFERENCES menu(menu_id) ON DELETE CASCADE,
    UNIQUE(cart_id, menu_id) -- prevent duplicate menu items in same cart
);

-- Orders
-- ============================================

CREATE TABLE orders (
    order_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    status smallint NOT NULL DEFAULT 1, -- PENDING, CONFIRMED, PREPARING, READY, COMPLETED, CANCELLED
    order_number VARCHAR(20) NOT NULL UNIQUE, -- e.g., "ORD20250101001"
    pickup_time TIMESTAMP,
    estimated_ready_time TIMESTAMP,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE RESTRICT
);

CREATE TABLE order_item (
    order_item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id INT NOT NULL,
    menu_id INT NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    price DECIMAL(10,2) NOT NULL, -- price snapshot at time of order
    subtotal DECIMAL(10,2) NOT NULL, -- quantity * price
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (menu_id) REFERENCES menu(menu_id) ON DELETE RESTRICT
);

-- Payments
-- ============================================

CREATE TABLE payment (
    payment_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_method smallint NOT NULL DEFAULT  1, -- CARD, CASH, MOBILE, STUDENT_CARD
    payment_status smallint NOT NULL DEFAULT 1, -- PENDING, COMPLETED, FAILED, REFUNDED
    transaction_id VARCHAR(100),
    transaction_time TIMESTAMP,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE RESTRICT
);

-- Reviews & Reports
-- ============================================

CREATE TABLE review (
    review_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    menu_id INT NOT NULL,
    content VARCHAR(100),
    star SMALLINT NOT NULL CHECK (star >= 1 AND star <= 5),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (menu_id) REFERENCES menu(menu_id) ON DELETE CASCADE
);

CREATE TABLE report (
    report_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    review_id INT NOT NULL,
    reporter_user_id INT NOT NULL,
    reason_code smallint NOT NULL default 1,
    status SMALLINT NOT NULL DEFAULT 1, -- PENDING, REVIEWED, RESOLVED, REJECTED
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP,
    FOREIGN KEY (review_id) REFERENCES review(review_id) ON DELETE CASCADE,
    FOREIGN KEY (reporter_user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Indexes for Performance
-- ============================================

-- User lookups
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_social_auth_provider_social_id ON social_auth(provider, social_id);

-- Cafeteria and category lookups
CREATE INDEX idx_category_cafeteria_id ON category(cafeteria_id);
CREATE INDEX idx_operating_hours_cafeteria_id ON operating_hours(cafeteria_id);

-- Menu browsing
CREATE INDEX idx_menu_category_id ON menu(category_id);
CREATE INDEX idx_menu_available ON menu(available);

-- Order queries
CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_created_at ON orders(created_at);
CREATE INDEX idx_order_items_order_id ON order_item(order_id);
CREATE INDEX idx_order_items_menu_id ON order_item(menu_id);

-- Cart operations
CREATE INDEX idx_cart_user_id ON cart(user_id);
CREATE INDEX idx_cart_item_cart_id ON cart_item(cart_id);
CREATE INDEX idx_cart_item_menu_id ON cart_item(menu_id);

-- Reviews
CREATE INDEX idx_review_menu_id ON review(menu_id);
CREATE INDEX idx_review_user_id ON review(user_id);

-- Reports
CREATE INDEX idx_report_review_id ON report(review_id);
CREATE INDEX idx_report_status ON report(status);

-- Payments
CREATE INDEX idx_payment_order_id ON payment(order_id);
CREATE INDEX idx_payment_status ON payment(payment_status);

-- Rankings
CREATE INDEX idx_rank_menu_id ON rank(menu_id);
CREATE INDEX idx_rank_period_date ON rank(period, rank_date);
